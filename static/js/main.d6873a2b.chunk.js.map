{"version":3,"sources":["Header/styled.js","Header/index.js","Amount/styled.js","Amount/index.js","Currency/currencies.js","Currency/styled.js","Currency/index.js","Buttons/styled.js","Buttons/index.js","Note/styled.js","Note/index.js","Result/styled.js","Result/index.js","Clock/styled.js","Clock/useCurrentDate.js","Clock/index.js","styled.js","App.js","reportWebVitals.js","index.js"],"names":["StyledLegend","styled","legend","Header","props","LabelText","span","AmountInpunt","input","Amount","amount","setAmount","value","onChange","target","type","step","placeholder","required","currencies","short","name","rate","CurrencySelect","select","Currency","currency","setCurrency","map","StyledButton","button","Buttons","resetForm","className","onClick","StyledNote","p","Note","StyledResult","Result","result","targetAmount","StyledClock","formatDate","date","toLocaleDateString","undefined","day","weekday","month","year","hour","minute","second","Clock","useState","Date","setDate","useEffect","intervalId","setInterval","clearInterval","useCurrentDate","Form","form","Fieldset","fieldset","App","initialResult","setResult","onSubmit","event","preventDefault","find","toFixed","calculateResult","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6873a2b.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledLegend = styled.legend`\r\n    border: 1px solid #171411;\r\n    background-color: #0f2637;\r\n    color: white;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n`;","import React from \"react\";\r\nimport { StyledLegend } from \"./styled\";\r\n\r\nconst Header = (props) => (\r\n    <StyledLegend>\r\n        KALKULATOR WALUTOWY\r\n    </StyledLegend>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const LabelText = styled.span`\r\n    color: black;\r\n    display: inline-block;\r\n    width: 100%;\r\n    max-width: 150px;\r\n    margin-right: 5px;\r\n    text-align: center;\r\n`;\r\n\r\nexport const AmountInpunt = styled.input`\r\n    border: 1px solid black;\r\n    border-color: black;\r\n    padding: 10px;\r\n    width: 100%;\r\n    max-width: 400px;\r\n    border-radius: 5px;\r\n`;","import React from \"react\";\r\nimport { LabelText, AmountInpunt } from \"./styled\";\r\n\r\nconst Amount = ({ amount, setAmount }) => (\r\n    <label>\r\n        <LabelText>Kwota do przeliczenia*:\r\n        </LabelText>\r\n        <AmountInpunt\r\n            value={amount}\r\n            onChange={({ target }) => setAmount(target.value)}\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            placeholder=\"Kwota PLN\"\r\n            required\r\n        />\r\n    </label>\r\n);\r\n\r\nexport default Amount;","export const currencies = [\r\n    {\r\n        short: \"USD\",\r\n        name: \"Dolar amerykański\",\r\n        rate: 3.78,\r\n    },\r\n    {\r\n        short: \"EUR\",\r\n        name: \"Euro\",\r\n        rate: 4.56,\r\n    },\r\n    {\r\n        short: \"SEK\",\r\n        name: \"Korona szwedzka\",\r\n        rate: 0.44,\r\n    },\r\n];","import styled from \"styled-components\";\r\n\r\nexport const LabelText = styled.span`\r\n    color: black;\r\n    display: inline-block;\r\n    width: 100%;\r\n    max-width: 150px;\r\n    margin-right: 5px;\r\n    text-align: center;\r\n`;\r\n\r\nexport const CurrencySelect = styled.select`\r\n    border: 1px solid #ccc;\r\n    border-color: black;\r\n    padding: 10px;\r\n    width: 100%;\r\n    max-width: 400px;\r\n    border-radius: 5px;\r\n`;","import React from \"react\";\r\nimport { currencies } from './currencies';\r\nimport { CurrencySelect, LabelText } from \"./styled\";\r\n\r\nconst Currency = ({ currency, setCurrency }) => (\r\n  <label>\r\n    <LabelText>\r\n      Przelicz na*:\r\n    </LabelText>\r\n    <CurrencySelect\r\n      value={currency}\r\n      onChange={({ target }) => setCurrency(target.value)}\r\n    >\r\n      {currencies.map((currency => (\r\n        <option\r\n          key={currency.short}\r\n          value={currency.short}\r\n        >\r\n          {currency.name}\r\n        </option>\r\n      )))}\r\n    </CurrencySelect>\r\n  </label>\r\n)\r\n\r\nexport default Currency;","import styled from \"styled-components\";\r\n\r\nexport const StyledButton = styled.button`\r\n    border: none;\r\n    margin: 10px;\r\n    background-color: #0f2637;\r\n    color: white;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n\r\n        &:hover {\r\n            background-color: #1c2161ed;\r\n        }\r\n\r\n        &:active {\r\n            background-color: hsl(236deg 55% 25% / 70%);\r\n        }\r\n`;","import React from \"react\";\r\nimport { StyledButton } from \"./styled\";\r\n\r\nconst Buttons = ({ resetForm }) => (\r\n    <>\r\n        <StyledButton>\r\n            Przelicz   \r\n        </StyledButton>\r\n        <StyledButton\r\n            type=\"reset\"\r\n            className=\"button\"\r\n            onClick={resetForm}\r\n        >\r\n            Wyczyść\r\n        </StyledButton>\r\n    </>\r\n);\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledNote = styled.p`\r\n    color: #ffffff;\r\n    text-align: center;\r\n`;","import React from \"react\";\r\nimport { StyledNote } from \"./styled\";\r\n\r\nconst Note = (props) => (\r\n    <StyledNote>\r\n        Pola z oznaczeniem * wymagają wypełnienia\r\n    </StyledNote>\r\n)\r\n\r\nexport default Note;","import styled from \"styled-components\";\r\n\r\nexport const StyledResult = styled.p`\r\n    background-color: #0f2637;\r\n    border: 2px solid black;\r\n    color: white;\r\n    max-width: 700px;\r\n    margin: 0 auto;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    text-align: center;\r\n`;","import React from \"react\";\r\nimport { StyledResult } from \"./styled\";\r\n\r\nconst Result = ({ result }) => (\r\n    <StyledResult>\r\n        WYNIK:{\" \"}\r\n        <strong>\r\n            {result.targetAmount}\r\n            {result.currency}\r\n        </strong>\r\n    </StyledResult>\r\n\r\n)\r\nexport default Result;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledClock = styled.p`\r\n    text-align: end;\r\n    padding: 0 30px;\r\n    margin: auto 20px;\r\n`;","import { useState, useEffect } from \"react\";\r\n\r\nconst formatDate = (date) => {\r\n    return date.toLocaleDateString(undefined, {\r\n        day: \"numeric\",\r\n        weekday: \"long\",\r\n        month: \"long\",\r\n        year: \"numeric\",\r\n        hour: \"numeric\",\r\n        minute: \"numeric\",\r\n        second: \"numeric\",\r\n    });\r\n};\r\n\r\nexport const useCurrentDate = () => {\r\n    const [date, setDate] = useState(formatDate(new Date()));\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            setDate(formatDate(new Date()));\r\n        }, 1000);\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        };\r\n    }, []);\r\n\r\n    return date;\r\n\r\n};","import React from 'react';\r\nimport { StyledClock } from \"./styled\";\r\nimport { useCurrentDate } from \"./useCurrentDate\";\r\n\r\nconst Clock = () => {\r\n    const date = useCurrentDate();\r\n\r\n    return (\r\n        <StyledClock>\r\n            Dzisiaj jest\r\n            {\" \"}\r\n            {date}\r\n        </StyledClock>\r\n    );\r\n};\r\n\r\nexport default Clock;","import styled from \"styled-components\";\r\n\r\nexport const Form = styled.form`\r\n    width: 100%;\r\n    max-width: 600px;\r\n`;\r\n\r\nexport const Fieldset = styled.fieldset`\r\n    text-align: center;\r\n    margin: 20px auto;\r\n    padding: 20px 0 20px;\r\n    border: 2px solid #171411;\r\n    border-radius: 10px;\r\n    background-color: #adffff9e;\r\n`;","import React, { useState } from 'react';\r\nimport Header from \"./Header\";\r\nimport Amount from \"./Amount\";\r\nimport Currency from './Currency';\r\nimport Buttons from './Buttons';\r\nimport Note from './Note';\r\nimport Result from './Result';\r\nimport { currencies } from './Currency/currencies';\r\nimport Clock from './Clock';\r\nimport { Fieldset, Form } from \"./styled\";\r\n\r\nfunction App() {\r\n\r\n  const initialResult = {\r\n    targetAmount: \" \",\r\n    currency: currencies.short,\r\n  };\r\n\r\n  const [result, setResult] = useState(initialResult);\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [currency, setCurrency] = useState(currencies[0].short);\r\n\r\n  const calculateResult = (currency, amount) => {\r\n    const rate = currencies\r\n      .find(({ short }) => short === currency)\r\n      .rate;\r\n\r\n    setResult({\r\n      targetAmount: (amount / rate).toFixed(2),\r\n      currency: currency,\r\n    });\r\n  };\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    calculateResult(currency, amount);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setResult(initialResult);\r\n    setAmount(0);\r\n  };\r\n\r\n  return (\r\n    <Form \r\n      onSubmit={onSubmit} >\r\n      <Fieldset>\r\n        <Header />\r\n        <Clock />\r\n        <p>\r\n          <Amount\r\n            amount={amount}\r\n            setAmount={setAmount} />\r\n        </p>\r\n        <p>\r\n          <Currency\r\n            currency={currency}\r\n            setCurrency={setCurrency} />\r\n        </p>\r\n        <p>\r\n          <Buttons\r\n            resetForm={resetForm} />\r\n        </p>\r\n      </Fieldset>\r\n      <Note />\r\n      <Result\r\n        result={result} />\r\n    </Form>\r\n  );\r\n};\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}